import { ICache } from "./Cache";
import { IContext } from "./Context";
import { ILogger } from "../logging/Logger";

export interface IOptions {
    sdkKey?: string;

    /**
     * The base URI for the FeatBit Evaluation server.
     */
    baseUri?: string;

    cache?: ICache;

    context?: IContext;

    /**
     * Whether streaming mode should be used to receive flag updates.
     *
     * This is true by default. If you set it to false, the client will use polling.
     * Streaming should only be disabled on the advice of LaunchDarkly support.
     */
    stream?: boolean;

    /**
     * The time between polling requests, in milliseconds, if less than 30 000 ms, 30 000 ms would be used. Ignored in streaming mode.
     */
    pollInterval?: number;

    /**
     * Configures a logger for warnings and errors generated by the SDK.
     *
     * The logger can be any object that conforms to the {@link ILogger} interface.
     * For a simple implementation that lets you filter by log level, see
     * {@link BasicLogger}. You can also use an instance of `winston.Logger` from
     * the Winston logging package.
     *
     * If you do not set this property, the SDK uses {@link BasicLogger} with a
     * minimum level of `info`.
     */
    logger?: ILogger;

    /**
     *  Timeout in milliseconds for the WebSocket handshake request. This is reset after every redirection.
     */
    webSocketHandshakeTimeout?: number;
}